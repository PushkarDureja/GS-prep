//MIN NUMBER OF FLIPS:

class GFG {
	public static void main (String[] args) {
		Scanner scn=new Scanner(System.in);
		int t=scn.nextInt();
		while(t-->0){
		    String s=scn.next();
		    //mark 0th char as correct then find incorrect positions;
		    int eones=0;        
		    int ozero=0;
		    int oones=0;
		    int ezero=0;
		    
		    for(int i=0;i<s.length();i++){
		        char ch=s.charAt(i);
		        if(i%2==0){
		            if(ch=='0'){
		               ezero++; 
		            }else{
		                eones++;
		            }
		        }else{
		            if(ch=='0'){
		                ozero++;
		            }else{
		                oones++;
		            }
		        }
		    }
		    
		    int mincost=Math.min(eones+ozero,ezero+oones);
		    System.out.println(mincost);
		}
	}
}


COUNT PAIRS WITH GIVEN SUM

 int getPairsCount(int[] arr, int n, int k) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int count=0;
        for(int ele:arr){
            if((map.containsKey(k-ele)))
            count+=map.get(k-ele);
            map.put(ele,map.getOrDefault(ele,0)+1);
        }
        return count;
    }


Binary Tree To DLL

pair<Node*,Node*> helper(Node *root){
    if(root == NULL)
        return {NULL,NULL};
    
    if(root->left == NULL  && root->right == NULL){
        return {root,root};
    }
    
    auto l = helper(root->left);
    auto r = helper(root->right);
    
    if(l.first && r.first){
        l.second->right = root;
        root->left = l.second;
        root->right = r.first;
        r.first->left = root;
        return {l.first,r.second};
    }
    else if(l.first == NULL && r.first){
        root->left = NULL;
        root->right = r.first;
        r.first->left = root;
        return {root,r.second};
    }
    
        l.second->right = root;
        root->left = l.second;
        return {l.first,root};
    
}


Node * bToDLL(Node *root)
{
    // your code here
    auto ans = helper(root);
    return ans.first;
}


: METHOD 2 USING DUMMY HEAD:
class GfG
{   static Node tail;
    Node bToDLL(Node root)
    {
	    Node dHead=new Node(-1);
	    tail=dHead;
	    inorder(root);
	    Node ans=dHead.right;
	    ans.left=null;
	    return ans;
    }
    
    void inorder(Node root){
        if(root==null){
            return ;
        }
        
        inorder(root.left);
        tail.right=root;
        root.left=tail;
        tail=root;
        inorder(root.right);
    }
    
    
}

MISSING AND REPEATING
class Solve {
    int[] findTwoElement(int arr[], int n) {
        int i=0;
        int rep=-1;
        int mis=-1;
        while(i<arr.length){
            int idx=arr[i]-1;
            if(arr[idx]==idx+1){
                if(rep!=-1 && i!=idx){
                  swap(arr,i,idx);
                  mis=i+1;
                  i++;
                }
                else if(i==idx){
                    i++;
                }else{
                    rep=arr[idx];
                    mis=i+1;
                    i++;
                }
            }else{
                swap(arr,i,idx);
            }
            
        }
        int[] ans=new int[2];
        ans[0]=rep;
        ans[1]=mis;
        return ans;
    }
    void swap(int[] arr,int i,int j){
        arr[j]=((arr[i]+arr[j])-(arr[i]=arr[j]));
    }
}

